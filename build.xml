<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================= 
    Introduction to Service Design and Engineering Laboratory
    Description: ANT build script for the session on JAXB and Dozer 
    Author: cdparra
    
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE'
       
       # The target "download-ivy" and "install-ivy" will download the ivy jar and place it in the "ivy" folder
       # 
-->
<project name="JAXBExample" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- PART 1: Ivy properties, download, installation and configuration -->
	<property name="ivy.install.version" value="2.4.0-rc1" />
	<property name="ivy.jar.dir" value="${basedir}/ivy" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<!-- this targe will donwload ivy.jar if its inot in the "ivy" folder yet -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<!--
			 ================================= 
			          target: install-ivy         
			            this target is not necessary if you put ivy.jar in your ant lib directory
			            if you already have ivy in your ant lib, you can simply remove this
			            target and the dependency the 'init' target has on it
			         ================================= 
			-->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<!--
			 try to load ivy here from local ivy dir, in case the user has not already dropped
			              it into ant's lib dir (note that the latter copy will always take precedence).
			              We will not fail as long as local lib dir exists (it may be empty) and
			              ivy is in at least one of ant's lib dir or the local lib dir. 
			-->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<!-- PART 2: General properties definitions -->
	<property name="build.dir" value="build" />
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="xjc.package" value="store.generated" />

	<!-- ================================= 
	          target: resolve downloads the dependencies to your lib folder              
	         ================================= -->
	<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
	</target>


	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}" />
	</path>


	<path id="run.path.id">
		<path refid="lib.path.id" />
		<fileset dir="${build.dir}">
			<include name="*.class" />
			<include name="**/*.class" />
			<exclude name="**/*Test*" />
		</fileset>
	</path>

	<!-- PART 3: compilation and execution targets for this session -->
	<target name="init" depends="install-ivy, resolve">
		<echo message="Init has been called" />
		<mkdir dir="${build.dir}" />
		<echo message="${build.dir} has been created" />
	</target>

	<target name="clean">
				<echo message="Clean has been called" />
				<delete dir="${build.dir}" />
				<echo message="${build.dir} has been deleted" />
				<delete dir="${src.dir}/${xjc.package}" />
				<echo message="${src.dir}/${xjc.package} has been deleted" />
				<delete file="people.xml" />
				<echo message="people.xml has been deleted" />
			</target>

	<target name="generate" depends="init">
			<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
			</taskdef>
			<xjc schema="people.xsd" destdir="${src.dir}" package="${xjc.package}" />
		</target>

	<target name="compile" depends="init, generate">
		<echo message="Compile target has been called" />
		<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
		</javac>
		<copy todir="${build.dir}" overwrite="true">
			<fileset dir="${src.dir}">
				<include name="*.xml" />
			</fileset>
		</copy>
	</target>
	
	
	<!--
	
	TARGETS FOR THE FIRST ASSIGNMENT OF SDE
	Assignment 01: Reading/Writing objects to and from XML and JSON
	
	-->

	<!--
		EVALUATION SCRIPT - runs instruction 2 based on Lab 3
			- Function that prints all people in the list with detail
	-->
	<target name="Lab03-exercise2" depends="compile">
				<echo message="Prints all people in the list with details" />
				<java classname="lab03part" classpath="${build.dir}">
					<arg value="printAllPeople" />
				</java>
		</target>
	
	<!--
		EVALUATION SCRIPT - runs instruction 3 based on Lab 3 with id = 5 (make sure you have a person with such an id)
			- function that accepts id as parameter and prints the HealthProfile of the person with that id
	-->
	<target name="Lab03-exercise3" depends="compile">
				<echo message="Function that accepts id as parameter and prints the HealthProfile of the person with that id" />
				<java classname="lab03part" classpath="${build.dir}">
					<arg value="displayHealthProfile" />
					<arg value="5" />
				</java>
		</target>
	
	<!--
		EVALUATION SCRIPT - runs instruction 4 based on Lab 3 with weight > 90
			- function which accepts a weight and an operator (=, > , <) as parameters and 
			  prints people that fulfill that condition (i.e., >80Kg, =75Kg, etc.).
	-->
	<target name="Lab03-exercise4" depends="compile">
				<echo message="Function which accepts a weight and an operator as parameter" />
				<java classname="lab03part" classpath="${build.dir}">
					<arg value="displayWeightOperator" />
					<arg value=">90" />
				</java>
		</target>
	

	<!--
		EVALUATION SCRIPT - runs instruction 2 based on Lab 4 (marshaling to XML - create 3 persons using java and marshal them to XML)
						    please print the content and save to .xml file
				
		- Java application that does the marshalling
	-->
	<target name="Lab04-exercise2.1" depends="compile">
				<echo message="Java application that does the marshalling"/>
				<echo message="A XML file was just created with name people-marshalling.xml"/>
				<echo message=""/>
				<echo message="============================================================"/>
				<java classname="Marshalling" classpath="${build.dir}">
							<classpath>
								<fileset dir="${lib.dir}">
									<include name="**/*.jar" />
									<include name="*.jar" />
								</fileset>
							</classpath>
						</java>
	    </target>
	
	<!--
			EVALUATION SCRIPT - runs instruction 2 based on Lab 4 (un-marshaling from XML)
					
			- Java application that does the un-marshalling of XML file
	-->
	<target name="Lab04-exercise2.2" depends="compile">
				<echo message="Java application that does the UNmarshalling"/>
				<echo message="the XML file people-marshalling.xml is taken"/>
				<echo message=""/>
				<echo message="============================================================"/>
				<java classname="Unmarshalling" classpath="${build.dir}">
							<classpath>
								<fileset dir="${lib.dir}">
									<include name="**/*.jar" />
									<include name="*.jar" />
								</fileset>
							</classpath>
						</java>
	 </target>
	
	<!--
			EVALUATION SCRIPT - runs instruction 3 based on Lab 4 (marshaling to JSON)
				 			  - save to .json file
						
			- java application to convert also JSON
	-->
	<target name="Lab04-exercise3" depends="compile">
				<echo message="Java application that does the marshalling to JSON"/>
				<echo message="A JSON file was just created with name people-marshalling-js.json"/>
				<echo message=""/>
				<echo message="============================================================"/>
				<java classname="MarshallingJSON" classpath="${build.dir}">
							<classpath>
								<fileset dir="${lib.dir}">
									<include name="**/*.jar" />
									<include name="*.jar" />
								</fileset>
							</classpath>
				        </java>
     </target>
	
	
	<!-- using execute-evaluation is possible to build all the functions requested from the Assignment -->
	<target name="execute.evaluation" depends="Lab03-exercise2,Lab03-exercise3,Lab03-exercise4,Lab04-exercise2.1,
		Lab04-exercise2.2, Lab04-exercise3">
			<echo message="Executing evaluation" />
		</target>
	
	
	
</project>